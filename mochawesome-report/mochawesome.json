{
  "stats": {
    "suites": 5,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-28T04:39:36.784Z",
    "end": "2023-03-28T04:39:38.560Z",
    "duration": 1776,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "19dd8c0a-79e3-438d-91a4-baefbe33412d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eda2d27c-9ceb-46fe-8621-d8d8dc4519a0",
          "title": "---------> Employee Model <--------",
          "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.integration.test.js",
          "file": "\\test\\employee.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"---------> Employee Model <--------\"",
              "fullTitle": "---------> Employee Model <-------- \"before each\" hook in \"---------> Employee Model <--------\"",
              "timedOut": false,
              "duration": 48,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmployee = await Employee.create(employee); // Create a new employee in the database\nemployeeId = newEmployee._id; // Store the ID of the newly created employee",
              "err": {},
              "uuid": "11d40b53-5a8b-4714-b093-4a91ffa9c195",
              "parentUUID": "eda2d27c-9ceb-46fe-8621-d8d8dc4519a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"---------> Employee Model <--------\"",
              "fullTitle": "---------> Employee Model <-------- \"after each\" hook in \"---------> Employee Model <--------\"",
              "timedOut": false,
              "duration": 48,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Employee.deleteOne({ _id: employeeId }); // Delete the employee from the database",
              "err": {},
              "uuid": "2ad174bc-ea72-49b9-aa53-968f4a90c7a1",
              "parentUUID": "eda2d27c-9ceb-46fe-8621-d8d8dc4519a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e4605fdf-c83c-46b8-b398-c346a9e0fe64",
              "title": "/PUT employee/:id",
              "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.integration.test.js",
              "file": "\\test\\employee.integration.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should update an employee by id",
                  "fullTitle": "---------> Employee Model <-------- /PUT employee/:id it should update an employee by id",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEmployee = {\n  firstName: \"Mashrafee\",\n  lastName: \"Mortaza\",\n  phone: \"01555555555\",\n};\nchai\n  .request(app)\n  .put(`/employee/${employeeId}`) // Make a PUT request to update the employee\n  .send(updatedEmployee) // Send the updated employee object in the request body\n  .end((err, res) => {\n    if (err) return done(err);\n    res.should.have.status(200); // Expect the HTTP response status code to be 200 OK\n    res.body.should.be.a(\"object\"); // Expect the response body to be an object\n    res.body.should.have.property(\"message\").eql(\"Update Successfull!\"); // Expect the response message to indicate successful update\n    done(); // Call done() to indicate the test case is complete\n  });",
                  "err": {},
                  "uuid": "b88e15ec-3e89-4892-872e-a1afe057bc70",
                  "parentUUID": "e4605fdf-c83c-46b8-b398-c346a9e0fe64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should return 404 if employee not found",
                  "fullTitle": "---------> Employee Model <-------- /PUT employee/:id it should return 404 if employee not found",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEmployee = {\n  firstName: \"Kabir\",\n  lastName: \"Khan\",\n  phone: \"0175545687\",\n};\nchai\n  .request(app)\n  .put(\"/employee/642151e1f8e4988b9c8a4d5f\") // Make a PUT request to update an employee that doesn't exist\n  .send(updatedEmployee)\n  .end((err, res) => {\n    if (err) return done(err);\n    res.should.have.status(404); // Expect the HTTP response status code to be 404 Not Found or 500 Internal Server Error\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"message\").eql(\"Employee not found\"); // Expect the response message to indicate employee not found\n    done(); // Test case complete\n  });",
                  "err": {},
                  "uuid": "9e87e3f7-8154-4442-9ff8-019ef9770c6f",
                  "parentUUID": "e4605fdf-c83c-46b8-b398-c346a9e0fe64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if server error in update",
                  "fullTitle": "---------> Employee Model <-------- /PUT employee/:id should return 500 if server error in update",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a new error object to use as a mock error\nconst mockError = new Error(\"Server Error\");\n// Create a stub for the findByIdAndUpdate method on the Employee model\nsinon.stub(Employee, \"findByIdAndUpdate\").throws(mockError);\n// Create an object representing the updated employee data\nconst updatedEmployee = {\n  firstName: \"Jane\",\n  lastName: \"Doe\",\n  phone: \"9876543210\",\n};\n// Send a PUT request to the app with the updated employee data\nchai\n  .request(app)\n  .put(`/employee/${employeeId}`)\n  .send(updatedEmployee)\n  .end((err, res) => {\n    Employee.findByIdAndUpdate.restore(); // Restore the stubbed method to its original implementation\n    if (err) return done(err); // If there is an error in the request, pass it to the done() callback\n    res.should.have.status(500); // Assert that the response has a status code of 500\n    res.body.should.be.a(\"object\"); // Assert that the response body is an object\n    res.body.should.have.property(\"message\").eql(\"Server Error\"); // Assert that the response body has a \"message\" property equal to \"Server Error\"\n    done(); // Test case is completed\n  });",
                  "err": {},
                  "uuid": "46579d54-ace3-4f28-bb95-e34baf2f9eda",
                  "parentUUID": "e4605fdf-c83c-46b8-b398-c346a9e0fe64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b88e15ec-3e89-4892-872e-a1afe057bc70",
                "9e87e3f7-8154-4442-9ff8-019ef9770c6f",
                "46579d54-ace3-4f28-bb95-e34baf2f9eda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86669a76-0f75-40e4-9233-842222745bcd",
              "title": "/DELETE employee/:id",
              "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.integration.test.js",
              "file": "\\test\\employee.integration.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should delete an employee by id",
                  "fullTitle": "---------> Employee Model <-------- /DELETE employee/:id it should delete an employee by id",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(app)\n  .delete(`/employee/${employeeId}`) // make a DELETE request with the employee id to be deleted\n  .end((err, res) => {\n    // check response\n    if (err) return done(err); // if error, return error message\n    res.should.have.status(200);\n    res.body.should.be.a(\"object\"); // assert response body to be an object\n    res.body.should.have\n      .property(\"message\")\n      .eql(\"Employee deleted successfully\"); // assert response message to be \"Employee deleted successfully\"\n    done(); // call done to end the test case\n  });",
                  "err": {},
                  "uuid": "1b3e81df-280b-4e46-93bb-c01b02461894",
                  "parentUUID": "86669a76-0f75-40e4-9233-842222745bcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should return 404 if employee not found",
                  "fullTitle": "---------> Employee Model <-------- /DELETE employee/:id it should return 404 if employee not found",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(app)\n  .delete(\"/employee/642151e1f8e4988b9c8a4d5e\")\n  .end((err, res) => {\n    if (err) return done(err);\n    res.should.have.status(404);\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"message\").eql(\"Employee not found\");\n    done();\n  });",
                  "err": {},
                  "uuid": "fe607394-1515-4cf7-9733-fefe19dedd28",
                  "parentUUID": "86669a76-0f75-40e4-9233-842222745bcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if server error",
                  "fullTitle": "---------> Employee Model <-------- /DELETE employee/:id should return 500 if server error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockError = new Error(\"Server Error\");\nsinon.stub(Employee, \"findByIdAndDelete\").throws(mockError);\nchai\n  .request(app)\n  .delete(`/employee/${employeeId}`)\n  .end((err, res) => {\n    Employee.findByIdAndDelete.restore(); // restore the stubbed method\n    if (err) return done(err);\n    res.should.have.status(500);\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"message\").eql(\"Server Error\");\n    done();\n  });",
                  "err": {},
                  "uuid": "c999cc4d-248f-4cf7-8515-edefbfc3cad0",
                  "parentUUID": "86669a76-0f75-40e4-9233-842222745bcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b3e81df-280b-4e46-93bb-c01b02461894",
                "fe607394-1515-4cf7-9733-fefe19dedd28",
                "c999cc4d-248f-4cf7-8515-edefbfc3cad0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "abf6d653-0173-4203-b6fb-f111261c0501",
          "title": "---------------Employee Controller -UNIT ---------",
          "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.unit.test.js",
          "file": "\\test\\employee.unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "89170157-21f3-4627-8630-0fef25507605",
              "title": "updatedEmployee",
              "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.unit.test.js",
              "file": "\\test\\employee.unit.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update an employee by id",
                  "fullTitle": "---------------Employee Controller -UNIT --------- updatedEmployee should update an employee by id",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: { employeeId: \"64226271d84a6c25e809b26b\" },\n  body: { firstName: \"John\", lastName: \"Doe\", phone: \"555-555-5555\" },\n};\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\nconst findByIdAndUpdateStub = sinon\n  .stub(Employee, \"findByIdAndUpdate\")\n  .resolves({});\nawait updatedEmployee(req, res);\nexpect(\n  findByIdAndUpdateStub.calledOnceWith(\n    \"64226271d84a6c25e809b26b\",\n    req.body\n  )\n).to.be.true;\nexpect(res.status.calledOnceWith(200)).to.be.true;\nexpect(res.json.calledOnceWith({ message: \"Update Successfull!\" })).to.be\n  .true;\nfindByIdAndUpdateStub.restore();",
                  "err": {},
                  "uuid": "ad915b3a-d8ab-4061-aa21-e783759c7b2f",
                  "parentUUID": "89170157-21f3-4627-8630-0fef25507605",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if employee is not found",
                  "fullTitle": "---------------Employee Controller -UNIT --------- updatedEmployee should return 404 if employee is not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: { employeeId: \"123\" },\n  body: { firstName: \"John\", lastName: \"Doe\", phone: \"555-555-5555\" },\n};\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\nconst findByIdAndUpdateStub = sinon.stub(Employee, \"findByIdAndUpdate\");\n// Resolve with null if ID is \"123\"\nfindByIdAndUpdateStub.withArgs(\"123\").resolves(null);\n// Resolve with a truthy value for any other ID\nfindByIdAndUpdateStub.resolves({});\nawait updatedEmployee(req, res);\nexpect(findByIdAndUpdateStub.calledOnceWith(\"123\", req.body)).to.be.true;\nexpect(res.status.calledOnceWith(404)).to.be.true;\nexpect(res.json.calledOnceWith({ message: \"Employee not found\" })).to.be\n  .true;\nfindByIdAndUpdateStub.restore();",
                  "err": {},
                  "uuid": "c486b970-0fc5-4796-9f6a-9353575e2334",
                  "parentUUID": "89170157-21f3-4627-8630-0fef25507605",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if there is a server error",
                  "fullTitle": "---------------Employee Controller -UNIT --------- updatedEmployee should return 500 if there is a server error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: { employeeId: \"123\" },\n  body: { firstName: \"John\", lastName: \"Doe\", phone: \"555-555-5555\" },\n};\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\nconst findByIdAndUpdateStub = sinon\n  .stub(Employee, \"findByIdAndUpdate\")\n  .throws();\nawait updatedEmployee(req, res);\nexpect(findByIdAndUpdateStub.calledOnceWith(\"123\", req.body)).to.be.true;\nexpect(res.status.calledOnceWith(500)).to.be.true;\nexpect(res.json.calledOnceWith({ message: \"Server Error\" })).to.be.true;\nfindByIdAndUpdateStub.restore();",
                  "err": {},
                  "uuid": "431fa9e4-59be-4780-b9d0-3f271a2b773c",
                  "parentUUID": "89170157-21f3-4627-8630-0fef25507605",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad915b3a-d8ab-4061-aa21-e783759c7b2f",
                "c486b970-0fc5-4796-9f6a-9353575e2334",
                "431fa9e4-59be-4780-b9d0-3f271a2b773c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}