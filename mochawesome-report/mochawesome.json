{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-27T20:23:33.316Z",
    "end": "2023-03-27T20:23:35.247Z",
    "duration": 1931,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d06193e6-8b9a-45ce-8739-141e5a0aac6f",
      "title": "",
      "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.test.js",
      "file": "\\test\\employee.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2791e42e-c752-48d8-bcc4-3af902e3cf88",
          "title": "---------> Employees Test<--------",
          "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.test.js",
          "file": "\\test\\employee.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"---------> Employees Test<--------\"",
              "fullTitle": "---------> Employees Test<-------- \"before each\" hook in \"---------> Employees Test<--------\"",
              "timedOut": false,
              "duration": 54,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmployee = await Employee.create(employee); // Create a new employee in the database\nemployeeId = newEmployee._id; // Store the ID of the newly created employee",
              "err": {},
              "uuid": "54820e5d-9b25-480d-889e-0757fe3017cf",
              "parentUUID": "2791e42e-c752-48d8-bcc4-3af902e3cf88",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"---------> Employees Test<--------\"",
              "fullTitle": "---------> Employees Test<-------- \"after each\" hook in \"---------> Employees Test<--------\"",
              "timedOut": false,
              "duration": 54,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Employee.deleteOne({ _id: employeeId }); // Delete the employee from the database",
              "err": {},
              "uuid": "f9ac9198-0990-4b77-9ca0-aeb1908db318",
              "parentUUID": "2791e42e-c752-48d8-bcc4-3af902e3cf88",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f992bf9a-4f99-4fbe-a153-1c80e23e827b",
              "title": "/PUT employee/:id",
              "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.test.js",
              "file": "\\test\\employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should update an employee by id",
                  "fullTitle": "---------> Employees Test<-------- /PUT employee/:id it should update an employee by id",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEmployee = {\n  firstName: \"Mashrafee\",\n  lastName: \"Mortaza\",\n  phone: \"01555555555\",\n};\nchai\n  .request(app)\n  .put(`/employee/${employeeId}`) // Make a PUT request to update the employee\n  .send(updatedEmployee) // Send the updated employee object in the request body\n  .end((err, res) => {\n    if (err) return done(err);\n    res.should.have.status(200); // Expect the HTTP response status code to be 200 OK\n    res.body.should.be.a(\"object\"); // Expect the response body to be an object\n    res.body.should.have.property(\"message\").eql(\"Update Successfull!\"); // Expect the response message to indicate successful update\n    done(); // Call done() to indicate the test case is complete\n  });",
                  "err": {},
                  "uuid": "1aaf8740-b75d-4f8b-9e13-885b379cfd84",
                  "parentUUID": "f992bf9a-4f99-4fbe-a153-1c80e23e827b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should return 404 if employee not found",
                  "fullTitle": "---------> Employees Test<-------- /PUT employee/:id it should return 404 if employee not found",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEmployee = {\n  firstName: \"Kabir\",\n  lastName: \"Khan\",\n  phone: \"0175545687\",\n};\nchai\n  .request(app)\n  .put(\"/employee/642151e1f8e4988b9c8a4d5f\") // Make a PUT request to update an employee that doesn't exist\n  .send(updatedEmployee)\n  .end((err, res) => {\n    if (err) return done(err);\n    res.should.have.status(404); // Expect the HTTP response status code to be 404 Not Found or 500 Internal Server Error\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"message\").eql(\"Employee not found\"); // Expect the response message to indicate employee not found\n    done(); // Test case complete\n  });",
                  "err": {},
                  "uuid": "8a0ee581-cdb9-4e30-a722-f93bfef20c1c",
                  "parentUUID": "f992bf9a-4f99-4fbe-a153-1c80e23e827b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if server error in update",
                  "fullTitle": "---------> Employees Test<-------- /PUT employee/:id should return 500 if server error in update",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a new error object to use as a mock error\nconst mockError = new Error(\"Server Error\");\n// Create a stub for the findByIdAndUpdate method on the Employee model\nsinon.stub(Employee, \"findByIdAndUpdate\").throws(mockError);\n// Create an object representing the updated employee data\nconst updatedEmployee = {\n  firstName: \"Jane\",\n  lastName: \"Doe\",\n  phone: \"9876543210\",\n};\n// Send a PUT request to the app with the updated employee data\nchai\n  .request(app)\n  .put(`/employee/${employeeId}`)\n  .send(updatedEmployee)\n  .end((err, res) => {\n    Employee.findByIdAndUpdate.restore(); // Restore the stubbed method to its original implementation\n    if (err) return done(err); // If there is an error in the request, pass it to the done() callback\n    res.should.have.status(500); // Assert that the response has a status code of 500\n    res.body.should.be.a(\"object\"); // Assert that the response body is an object\n    res.body.should.have.property(\"message\").eql(\"Server Error\"); // Assert that the response body has a \"message\" property equal to \"Server Error\"\n    done(); // Test case is completed\n  });",
                  "err": {},
                  "uuid": "908a929f-3fa0-4aee-bccc-1cbb42438238",
                  "parentUUID": "f992bf9a-4f99-4fbe-a153-1c80e23e827b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1aaf8740-b75d-4f8b-9e13-885b379cfd84",
                "8a0ee581-cdb9-4e30-a722-f93bfef20c1c",
                "908a929f-3fa0-4aee-bccc-1cbb42438238"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 180,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13d3fbc5-9756-4f3c-a82b-337c2b214be2",
              "title": "/DELETE employee/:id",
              "fullFile": "E:\\Projects\\CRUD-Assignment\\test\\employee.test.js",
              "file": "\\test\\employee.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should delete an employee by id",
                  "fullTitle": "---------> Employees Test<-------- /DELETE employee/:id it should delete an employee by id",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(app)\n  .delete(`/employee/${employeeId}`) // make a DELETE request with the employee id to be deleted\n  .end((err, res) => {\n    // check response\n    if (err) return done(err); // if error, return error message\n    res.should.have.status(200);\n    res.body.should.be.a(\"object\"); // assert response body to be an object\n    res.body.should.have\n      .property(\"message\")\n      .eql(\"Employee deleted successfully\"); // assert response message to be \"Employee deleted successfully\"\n    done(); // call done to end the test case\n  });",
                  "err": {},
                  "uuid": "04331a02-52ab-4c6e-8e7f-34def2d638ff",
                  "parentUUID": "13d3fbc5-9756-4f3c-a82b-337c2b214be2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should return 404 if employee not found",
                  "fullTitle": "---------> Employees Test<-------- /DELETE employee/:id it should return 404 if employee not found",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(app)\n  .delete(\"/employee/642151e1f8e4988b9c8a4d5e\")\n  .end((err, res) => {\n    if (err) return done(err);\n    res.should.have.status(404);\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"message\").eql(\"Employee not found\");\n    done();\n  });",
                  "err": {},
                  "uuid": "51652149-fd25-4388-8664-5332810e220c",
                  "parentUUID": "13d3fbc5-9756-4f3c-a82b-337c2b214be2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if server error",
                  "fullTitle": "---------> Employees Test<-------- /DELETE employee/:id should return 500 if server error",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockError = new Error(\"Server Error\");\nsinon.stub(Employee, \"findByIdAndDelete\").throws(mockError);\nchai\n  .request(app)\n  .delete(`/employee/${employeeId}`)\n  .end((err, res) => {\n    Employee.findByIdAndDelete.restore(); // restore the stubbed method\n    if (err) return done(err);\n    res.should.have.status(500);\n    res.body.should.be.a(\"object\");\n    res.body.should.have.property(\"message\").eql(\"Server Error\");\n    done();\n  });",
                  "err": {},
                  "uuid": "f92b5043-b7e1-4ad4-a183-5e32cbf68f81",
                  "parentUUID": "13d3fbc5-9756-4f3c-a82b-337c2b214be2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04331a02-52ab-4c6e-8e7f-34def2d638ff",
                "51652149-fd25-4388-8664-5332810e220c",
                "f92b5043-b7e1-4ad4-a183-5e32cbf68f81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}